generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

//Entidades
model Users {
  id                 Int             @id @default(autoincrement())
  uid                String?         @unique @db.VarChar
  name               String          @db.VarChar
  lastname           String          @db.VarChar
  identificationType String          @db.VarChar
  identification     String          @unique @db.VarChar
  email              String          @unique @db.VarChar
  address            String?         @db.VarChar
  phone              String?         @db.VarChar
  isActive           Boolean         @default(true)
  roles              Roles?          @relation(fields: [roleId], references: [id])
  allyOf             Users[]         @relation("AllyRelation")
  ally               Users?          @relation("AllyRelation", fields: [allyId], references: [id])
  roleId             Int
  allyId             Int?
  supervisorOf       Users[]         @relation("SupervisorRelation")
  supervisor         Users?          @relation("SupervisorRelation", fields: [supervisorId], references: [id])
  supervisorId       Int?
  advisorStartDate   DateTime?
  advisorEndDate     DateTime?
  createdAt          DateTime        @default(now())
  updatedAt          DateTime        @updatedAt
  Logs               Logs[]
  configAlly         ConfigAlly[]
  AlliesAdvisor      AlliesAdvisor[]
}

model Roles {
  id               Int                @id @default(autoincrement())
  name             String             @unique @db.VarChar
  description      String?            @db.VarChar
  isActive         Boolean            @default(true)
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  user             Users[]
  rolesPermissions RolesPermissions[]
}

model Modules {
  id          Int           @id @default(autoincrement())
  name        String?       @db.VarChar
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  permissions Permissions[]
}

model Permissions {
  id              Int                @id @default(autoincrement())
  description     String?            @db.VarChar
  path            String?            @db.VarChar
  createdAt       DateTime           @default(now())
  updatedAt       DateTime           @updatedAt
  code            String             @db.VarChar
  modules         Modules            @relation(fields: [moduleId], references: [id])
  moduleId        Int
  isActive        Boolean            @default(true)
  rolesPermission RolesPermissions[]
}

model RolesPermissions {
  id           Int         @id @default(autoincrement())
  role         Roles       @relation(fields: [roleId], references: [id])
  roleId       Int
  permissions  Permissions @relation(fields: [permissionId], references: [id])
  permissionId Int
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
}

model Logs {
  id           Int      @id @default(autoincrement())
  users        Users?   @relation(fields: [actionUserId], references: [id])
  actionUserId Int
  description  String   @db.VarChar
  typeAction   String   @db.VarChar
  data         String   @db.VarChar
  model        String   @db.VarChar
  modelId      Int
  createdAt    DateTime @default(now())
}

model ConfigAlly {
  id                    Int       @id @default(autoincrement())
  ally                  Users?    @relation(fields: [allyId], references: [id])
  allyId                Int?      @unique()
  formBase              Boolean   @default(false)
  name                  String
  attributes            String
  dataPolicy            String
  noEssentialDataPolicy String
  createdAt             DateTime  @default(now())
  updatedAt             DateTime? @updatedAt
}

model AlliesAdvisor {
  id        Int       @id @default(autoincrement())
  advisor   Users?    @relation(fields: [advisorId], references: [id])
  advisorId Int
  allyId    Int
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
}
